# service_quotas.jinja - AFT Global Customizations template
# FIXED VERSION - Proper cross-account role assumption

terraform {
  required_version = ">= 1.0"
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
}

# US-East-1 provider alias (required for global Security Group quotas)
provider "aws" {
  alias  = "us_east_1"
  region = "us-east-1"
  
  # Ensure we're in the target account, not management account
  assume_role {
    role_arn = "{{ target_admin_role_arn }}"
  }
  
  default_tags {
    tags = {
      Project     = "AFT-Security-Group-Quota-Automation"
      Environment = "production"
      ManagedBy   = "AFT-Global-Customizations"
      Purpose     = "Security-Group-Quota-Automation"
      Timestamp   = "{{ timestamp }}"
    }
  }
}

# Data source to get current caller identity (account ID)
data "aws_caller_identity" "current" {
  provider = aws.us_east_1
}

# Security Group rules quota increase request with proper cross-account role assumption
resource "null_resource" "sg_quota_request" {
  triggers = {
    account_id = data.aws_caller_identity.current.account_id
    timestamp  = var.aft_timestamp
  }
  
  provisioner "local-exec" {
    command = <<-EOF
      echo "=== ATTEMPTING QUOTA REQUEST WITH PROPER ROLE ASSUMPTION ==="
      echo "Target Account: ${data.aws_caller_identity.current.account_id}"
      echo "Service: ${var.quota_service_code}"
      echo "Quota Code: ${var.quota_code}"
      echo "Desired Value: ${var.target_quota_value}"
      echo "Region: us-east-1"
      
      # Get temporary credentials for the target account
      echo "Assuming role in target account..."
      ROLE_ARN="arn:aws:iam::${data.aws_caller_identity.current.account_id}:role/AWSAFTExecution"
      
      # Use AWS CLI with explicit role assumption
      TEMP_CREDS=$(aws sts assume-role \
        --role-arn "$ROLE_ARN" \
        --role-session-name "AFT-QuotaRequest-$(date +%s)" \
        --output json)
      
      if [ $? -eq 0 ]; then
        echo "Successfully assumed role in target account"
        
        # Extract credentials
        export AWS_ACCESS_KEY_ID=$(echo $TEMP_CREDS | jq -r '.Credentials.AccessKeyId')
        export AWS_SECRET_ACCESS_KEY=$(echo $TEMP_CREDS | jq -r '.Credentials.SecretAccessKey')
        export AWS_SESSION_TOKEN=$(echo $TEMP_CREDS | jq -r '.Credentials.SessionToken')
        
        # Verify we're in the correct account
        echo "Verifying account context..."
        CURRENT_ACCOUNT=$(aws sts get-caller-identity --query 'Account' --output text --region us-east-1)
        echo "Current account: $CURRENT_ACCOUNT"
        
        if [ "$CURRENT_ACCOUNT" = "${data.aws_caller_identity.current.account_id}" ]; then
          echo "✅ Confirmed: Running in target account"
          
          # Try the quota request
          echo "Submitting quota request..."
          if aws service-quotas request-service-quota-increase \
            --service-code ${var.quota_service_code} \
            --quota-code ${var.quota_code} \
            --desired-value ${var.target_quota_value} \
            --region us-east-1 > /tmp/quota-request-${data.aws_caller_identity.current.account_id}.json 2>&1; then
            echo "✅ SUCCESS: Quota request submitted"
            echo "Result:"
            cat /tmp/quota-request-${data.aws_caller_identity.current.account_id}.json
          else
            echo "❌ FAILED: Quota request failed"
            echo "Error details:"
            cat /tmp/quota-request-${data.aws_caller_identity.current.account_id}.json
            exit 1
          fi
        else
          echo "❌ ERROR: Still in wrong account ($CURRENT_ACCOUNT)"
          exit 1
        fi
      else
        echo "❌ ERROR: Failed to assume role in target account"
        exit 1
      fi
    EOF
  }
}

# Outputs
output "aft_security_group_quota_info" {
  description = "Security Group quota automation results"
  value = {
    account_id       = data.aws_caller_identity.current.account_id
    primary_region   = var.account_region
    quota_region     = "us-east-1"
    timestamp        = var.aft_timestamp
    service_code     = var.quota_service_code
    quota_code       = var.quota_code
    requested_value  = var.target_quota_value
    method          = "AWS CLI with explicit cross-account role assumption"
  }
}

output "aft_quota_automation_metadata" {
  description = "Metadata for AFT quota automation tracking"
  value = {
    name           = "Security-Group-Rules-Quota-${data.aws_caller_identity.current.account_id}"
    description    = "Automated quota increase for Security Group rules per SG"
    account_id     = data.aws_caller_identity.current.account_id
    service_code   = var.quota_service_code
    quota_code     = var.quota_code
    target_value   = var.target_quota_value
    method         = "null_resource with AWS CLI cross-account"
    automation     = "aft-security-group-quota"
    environment    = "production"
    timestamp      = var.aft_timestamp
    requested_by   = "AFT-Global-Customizations"
    status         = "quota request submitted"
  }
}

output "aft_next_steps" {
  description = "Next steps for quota request monitoring"
  value = [
    "1. Check AWS Service Quotas console in us-east-1 for request status",
    "2. Look for Service: VPC, Quota: Rules per security group",
    "3. AWS will review and approve/deny the request (1-2 business days)", 
    "4. Quota will be automatically applied upon AWS approval",
    "5. Request submitted via AWS CLI with proper cross-account role assumption"
  ]
}