# service_quotas.jinja - AFT Global Customizations template
# This template automatically requests Security Group quota increases for new accounts
# Generated by AFT Global Customizations framework

terraform {
  required_version = ">= 1.0"
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
}

# US-East-1 provider alias (required for global Security Group quotas)
# This MUST be us-east-1 regardless of account's primary region
# Note: AFT already provides default provider, so we only need the alias
provider "aws" {
  alias  = "us_east_1"
  region = "us-east-1"
  
  default_tags {
    tags = {
      Project     = "AFT-Security-Group-Quota-Automation"
      Environment = "production"
      ManagedBy   = "AFT-Global-Customizations"
      Purpose     = "Security-Group-Quota-Automation"
      Timestamp   = "{{ timestamp }}"
    }
  }
}

# Data source to get current caller identity (account ID)
data "aws_caller_identity" "current" {
  provider = aws.us_east_1
}

# Data source to get current quota information
data "aws_servicequotas_service_quota" "sg_rules_current" {
  provider = aws.us_east_1
  
  service_code = var.quota_service_code
  quota_code   = var.quota_code
}

# Security Group rules quota increase request
# This automatically requests an increase from 60 to 200 rules per security group
resource "aws_servicequotas_service_quota" "sg_rules_quota" {
  provider = aws.us_east_1
  
  service_code = var.quota_service_code
  quota_code   = var.quota_code
  value        = var.target_quota_value
  
  tags = {
    Name        = "Security-Group-Rules-Quota-${data.aws_caller_identity.current.account_id}"
    Description = "Automated quota increase for Security Group rules per SG"
    RequestedBy = "AFT-Global-Customizations"
    AccountId   = data.aws_caller_identity.current.account_id
    Environment = "production"
    Timestamp   = var.aft_timestamp
  }
}

# Outputs for AFT logging and validation
output "aft_security_group_quota_info" {
  description = "Security Group quota automation results"
  value = {
    account_id       = data.aws_caller_identity.current.account_id
    primary_region   = var.account_region
    quota_region     = "us-east-1"
    
    current_quota = {
      service_code    = data.aws_servicequotas_service_quota.sg_rules_current.service_code
      quota_code      = data.aws_servicequotas_service_quota.sg_rules_current.quota_code
      quota_name      = data.aws_servicequotas_service_quota.sg_rules_current.quota_name
      current_value   = data.aws_servicequotas_service_quota.sg_rules_current.value
      default_value   = data.aws_servicequotas_service_quota.sg_rules_current.default_value
      adjustable      = data.aws_servicequotas_service_quota.sg_rules_current.adjustable
    }
    
    quota_request = {
      service_code     = aws_servicequotas_service_quota.sg_rules_quota.service_code
      quota_code       = aws_servicequotas_service_quota.sg_rules_quota.quota_code
      requested_value  = aws_servicequotas_service_quota.sg_rules_quota.value
      request_id       = aws_servicequotas_service_quota.sg_rules_quota.id
      request_status   = aws_servicequotas_service_quota.sg_rules_quota.request_status
      arn              = aws_servicequotas_service_quota.sg_rules_quota.arn
    }
  }
}

output "aft_next_steps" {
  description = "Next steps for quota request monitoring"
  value = [
    "1. Check AWS Service Quotas console in us-east-1 for request status",
    "2. Monitor request_id: ${aws_servicequotas_service_quota.sg_rules_quota.id}",
    "3. AWS will review and approve/deny the request (1-2 business days)",
    "4. Re-run AFT pipeline to check updated status",
    "5. Quota will be automatically applied upon AWS approval"
  ]
}