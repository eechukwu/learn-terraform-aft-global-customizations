# service_quotas.jinja - Multi-Region AFT Global Customizations template
# CLEAN VERSION - Minimal repetition with dynamic resources

terraform {
  required_version = ">= 1.0"
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
}

# Define locals for cleaner region handling
locals {
  # Supported regions (static due to Terraform provider limitations)
  supported_regions = {
    "us-east-1"      = { alias = "us_east_1", enabled = true }
    "eu-west-2"      = { alias = "eu_west_2", enabled = true }
    "ap-southeast-1" = { alias = "ap_southeast_1", enabled = true }
    "us-west-2"      = { alias = "us_west_2", enabled = true }
  }
  
  # Active regions (intersection of target_regions and supported_regions)
  active_regions = {
    for region, config in local.supported_regions : region => config
    if contains(var.target_regions, region) && lookup(var.regional_quota_settings, region, { enabled = true }).enabled
  }
  
  # Region-specific quota configurations
  regional_quotas = {
    for region in keys(local.active_regions) : region => {
      target_value = lookup(var.regional_quota_settings, region, { target_value = var.default_target_quota_value }).target_value
      priority     = lookup(var.regional_quota_settings, region, { priority = "medium" }).priority
    }
  }
}

# Static regional providers (required due to Terraform limitations)
provider "aws" {
  alias  = "us_east_1"
  region = "us-east-1"
  
  assume_role {
    role_arn = "{{ target_admin_role_arn }}"
  }
  
  default_tags {
    tags = {
      Project                 = "AFT-Security-Group-Quota-Automation"
      Environment            = "production"
      ManagedBy              = "AFT-Global-Customizations"
      Purpose                 = "Multi-Region-Security-Group-Quota-Automation"
      Region                 = "us-east-1"
      QuotaAutomationVersion = "2.0-multi-region"
      Timestamp              = "{{ timestamp }}"
    }
  }
}

provider "aws" {
  alias  = "eu_west_2"
  region = "eu-west-2"
  
  assume_role {
    role_arn = "{{ target_admin_role_arn }}"
  }
  
  default_tags {
    tags = {
      Project                 = "AFT-Security-Group-Quota-Automation"
      Environment            = "production"
      ManagedBy              = "AFT-Global-Customizations"
      Purpose                 = "Multi-Region-Security-Group-Quota-Automation"
      Region                 = "eu-west-2"
      QuotaAutomationVersion = "2.0-multi-region"
      Timestamp              = "{{ timestamp }}"
    }
  }
}

provider "aws" {
  alias  = "ap_southeast_1"
  region = "ap-southeast-1"
  
  assume_role {
    role_arn = "{{ target_admin_role_arn }}"
  }
  
  default_tags {
    tags = {
      Project                 = "AFT-Security-Group-Quota-Automation"
      Environment            = "production"
      ManagedBy              = "AFT-Global-Customizations"
      Purpose                 = "Multi-Region-Security-Group-Quota-Automation"
      Region                 = "ap-southeast-1"
      QuotaAutomationVersion = "2.0-multi-region"
      Timestamp              = "{{ timestamp }}"
    }
  }
}

provider "aws" {
  alias  = "us_west_2"
  region = "us-west-2"
  
  assume_role {
    role_arn = "{{ target_admin_role_arn }}"
  }
  
  default_tags {
    tags = {
      Project                 = "AFT-Security-Group-Quota-Automation"
      Environment            = "production"
      ManagedBy              = "AFT-Global-Customizations"
      Purpose                 = "Multi-Region-Security-Group-Quota-Automation"
      Region                 = "us-west-2"
      QuotaAutomationVersion = "2.0-multi-region"
      Timestamp              = "{{ timestamp }}"
    }
  }
}

# Dynamic caller identity data sources for active regions only
data "aws_caller_identity" "regional" {
  for_each = local.active_regions
  provider = aws[each.value.alias]
}

# Single dynamic resource for all regional quota requests
resource "null_resource" "regional_quota_requests" {
  for_each = local.active_regions

  triggers = {
    account_id    = data.aws_caller_identity.regional[each.key].account_id
    region        = each.key
    target_value  = local.regional_quotas[each.key].target_value
    timestamp     = var.aft_timestamp
    quota_code    = var.quota_code
  }
  
  provisioner "local-exec" {
    command = <<-EOF
      echo "=== QUOTA REQUEST FOR ${upper(each.key)} ==="
      echo "Account: ${data.aws_caller_identity.regional[each.key].account_id}"
      echo "Target Value: ${local.regional_quotas[each.key].target_value}"
      echo "Priority: ${local.regional_quotas[each.key].priority}"
      
      # Assume role for the region
      ROLE_ARN="arn:aws:iam::${data.aws_caller_identity.regional[each.key].account_id}:role/AWSAFTExecution"
      TEMP_CREDS=$(aws sts assume-role \
        --role-arn "$ROLE_ARN" \
        --role-session-name "AFT-QuotaRequest-${each.key}-$(date +%s)" \
        --output json)
      
      if [ $? -eq 0 ]; then
        echo "✅ Successfully assumed role for ${each.key}"
        
        # Export credentials
        export AWS_ACCESS_KEY_ID=$(echo $TEMP_CREDS | jq -r '.Credentials.AccessKeyId')
        export AWS_SECRET_ACCESS_KEY=$(echo $TEMP_CREDS | jq -r '.Credentials.SecretAccessKey')
        export AWS_SESSION_TOKEN=$(echo $TEMP_CREDS | jq -r '.Credentials.SessionToken')
        
        # Verify account context
        CURRENT_ACCOUNT=$(aws sts get-caller-identity --query 'Account' --output text --region ${each.key})
        echo "Current account: $CURRENT_ACCOUNT"
        
        if [ "$CURRENT_ACCOUNT" = "${data.aws_caller_identity.regional[each.key].account_id}" ]; then
          echo "✅ Confirmed: Running in correct account for ${each.key}"
          
          # Submit quota request
          echo "Submitting quota request for ${each.key}..."
          if aws service-quotas request-service-quota-increase \
            --service-code ${var.quota_service_code} \
            --quota-code ${var.quota_code} \
            --desired-value ${local.regional_quotas[each.key].target_value} \
            --region ${each.key} > /tmp/quota-request-${each.key}.json 2>&1; then
            
            echo "✅ SUCCESS: Quota request submitted for ${each.key}"
            echo "Result for ${each.key}:"
            cat /tmp/quota-request-${each.key}.json
            
            # Extract request ID for tracking
            REQUEST_ID=$(jq -r '.RequestedQuota.Id' /tmp/quota-request-${each.key}.json 2>/dev/null || echo "N/A")
            echo "Request ID for ${each.key}: $REQUEST_ID"
            
          else
            echo "❌ FAILED: Quota request failed for ${each.key}"
            echo "Error details:"
            cat /tmp/quota-request-${each.key}.json
            
            # Don't exit - continue with other regions
            echo "⚠️  Continuing with other regions..."
          fi
        else
          echo "❌ ERROR: Wrong account context for ${each.key} ($CURRENT_ACCOUNT)"
          exit 1
        fi
      else
        echo "❌ ERROR: Failed to assume role for ${each.key}"
        exit 1
      fi
    EOF
  }
}

# Outputs with dynamic content
output "multiregion_quota_summary" {
  description = "Multi-region quota automation summary"
  value = {
    account_id           = try(data.aws_caller_identity.regional[keys(local.active_regions)[0]].account_id, "unknown")
    target_regions       = var.target_regions
    active_regions       = keys(local.active_regions)
    regional_quotas      = local.regional_quotas
    automation_method    = "Multi-region providers with dynamic resources"
    timestamp            = var.aft_timestamp
    total_active_regions = length(local.active_regions)
  }
}

output "regional_quota_details" {
  description = "Per-region quota request details"
  value = {
    for region in keys(local.active_regions) : region => {
      account_id       = data.aws_caller_identity.regional[region].account_id
      region           = region
      service_code     = var.quota_service_code
      quota_code       = var.quota_code
      target_value     = local.regional_quotas[region].target_value
      priority         = local.regional_quotas[region].priority
      request_method   = "AWS CLI with cross-account role assumption"
      timestamp        = var.aft_timestamp
    }
  }
}

output "aft_next_steps" {
  description = "Next steps for multi-region quota management"
  value = [
    "1. Check AWS Service Quotas console in each active region:",
    "   Active regions: ${join(", ", keys(local.active_regions))}",
    "2. Look for Service: VPC, Quota: Rules per security group",
    "3. AWS will review and approve/deny requests (1-2 business days per region)",
    "4. Quotas will be automatically applied upon AWS approval",
    "5. Total regions configured: ${length(local.active_regions)}"
  ]
}