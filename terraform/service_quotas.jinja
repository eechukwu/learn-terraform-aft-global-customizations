# service_quotas.jinja - Multi-Region AFT Global Customizations template
# FIXED VERSION - Resolves Terraform provider configuration error

terraform {
  required_version = ">= 1.0"
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
}

# Define locals for cleaner region handling
locals {
  # Supported regions with their configurations
  supported_regions = {
    "us-east-1"      = { enabled = true, priority = "high" }
    "eu-west-2"      = { enabled = true, priority = "high" }
    "ap-southeast-1" = { enabled = true, priority = "medium" }
    "us-west-2"      = { enabled = true, priority = "medium" }
  }
  
  # Active regions based on target_regions variable
  active_regions = {
    for region in var.target_regions : region => local.supported_regions[region]
    if contains(keys(local.supported_regions), region) && 
       lookup(local.supported_regions, region, { enabled = true }).enabled
  }
}

# Static regional providers (required - no dynamic provider references allowed)
provider "aws" {
  alias  = "us_east_1"
  region = "us-east-1"
  
  assume_role {
    role_arn = "{{ target_admin_role_arn }}"
  }
  
  default_tags {
    tags = {
      Project                 = "AFT-Security-Group-Quota-Automation"
      Environment            = "production"
      ManagedBy              = "AFT-Global-Customizations"
      Purpose                 = "Multi-Region-Security-Group-Quota-Automation"
      Region                 = "us-east-1"
      QuotaAutomationVersion = "2.0-multi-region-fixed"
      Timestamp              = "{{ timestamp }}"
    }
  }
}

provider "aws" {
  alias  = "eu_west_2"
  region = "eu-west-2"
  
  assume_role {
    role_arn = "{{ target_admin_role_arn }}"
  }
  
  default_tags {
    tags = {
      Project                 = "AFT-Security-Group-Quota-Automation"
      Environment            = "production"
      ManagedBy              = "AFT-Global-Customizations"
      Purpose                 = "Multi-Region-Security-Group-Quota-Automation"
      Region                 = "eu-west-2"
      QuotaAutomationVersion = "2.0-multi-region-fixed"
      Timestamp              = "{{ timestamp }}"
    }
  }
}

provider "aws" {
  alias  = "ap_southeast_1"
  region = "ap-southeast-1"
  
  assume_role {
    role_arn = "{{ target_admin_role_arn }}"
  }
  
  default_tags {
    tags = {
      Project                 = "AFT-Security-Group-Quota-Automation"
      Environment            = "production"
      ManagedBy              = "AFT-Global-Customizations"
      Purpose                 = "Multi-Region-Security-Group-Quota-Automation"
      Region                 = "ap-southeast-1"
      QuotaAutomationVersion = "2.0-multi-region-fixed"
      Timestamp              = "{{ timestamp }}"
    }
  }
}

provider "aws" {
  alias  = "us_west_2"
  region = "us-west-2"
  
  assume_role {
    role_arn = "{{ target_admin_role_arn }}"
  }
  
  default_tags {
    tags = {
      Project                 = "AFT-Security-Group-Quota-Automation"
      Environment            = "production"
      ManagedBy              = "AFT-Global-Customizations"
      Purpose                 = "Multi-Region-Security-Group-Quota-Automation"
      Region                 = "us-west-2"
      QuotaAutomationVersion = "2.0-multi-region-fixed"
      Timestamp              = "{{ timestamp }}"
    }
  }
}

# Static caller identity data sources for each region
data "aws_caller_identity" "us_east_1" {
  count    = contains(var.target_regions, "us-east-1") ? 1 : 0
  provider = aws.us_east_1
}

data "aws_caller_identity" "eu_west_2" {
  count    = contains(var.target_regions, "eu-west-2") ? 1 : 0
  provider = aws.eu_west_2
}

data "aws_caller_identity" "ap_southeast_1" {
  count    = contains(var.target_regions, "ap-southeast-1") ? 1 : 0
  provider = aws.ap_southeast_1
}

data "aws_caller_identity" "us_west_2" {
  count    = contains(var.target_regions, "us-west-2") ? 1 : 0
  provider = aws.us_west_2
}

# Regional quota requests - one per region
resource "null_resource" "quota_request_us_east_1" {
  count = contains(var.target_regions, "us-east-1") ? 1 : 0

  triggers = {
    account_id    = data.aws_caller_identity.us_east_1[0].account_id
    region        = "us-east-1"
    target_value  = var.default_target_quota_value
    timestamp     = var.aft_timestamp
    quota_code    = var.quota_code
  }
  
  provisioner "local-exec" {
    command = <<-EOF
      echo "=== QUOTA REQUEST FOR US-EAST-1 ==="
      echo "Account: ${data.aws_caller_identity.us_east_1[0].account_id}"
      echo "Target Value: ${var.default_target_quota_value}"
      
      # Assume role for the region
      ROLE_ARN="arn:aws:iam::${data.aws_caller_identity.us_east_1[0].account_id}:role/AWSAFTExecution"
      TEMP_CREDS=$(aws sts assume-role \
        --role-arn "$ROLE_ARN" \
        --role-session-name "AFT-QuotaRequest-us-east-1-$(date +%s)" \
        --output json)
      
      if [ $? -eq 0 ]; then
        echo "✅ Successfully assumed role for us-east-1"
        
        # Export credentials
        export AWS_ACCESS_KEY_ID=$(echo $TEMP_CREDS | jq -r '.Credentials.AccessKeyId')
        export AWS_SECRET_ACCESS_KEY=$(echo $TEMP_CREDS | jq -r '.Credentials.SecretAccessKey')
        export AWS_SESSION_TOKEN=$(echo $TEMP_CREDS | jq -r '.Credentials.SessionToken')
        
        # Submit quota request
        echo "Submitting quota request for us-east-1..."
        if aws service-quotas request-service-quota-increase \
          --service-code ${var.quota_service_code} \
          --quota-code ${var.quota_code} \
          --desired-value ${var.default_target_quota_value} \
          --region us-east-1 > /tmp/quota-request-us-east-1.json 2>&1; then
          
          echo "✅ SUCCESS: Quota request submitted for us-east-1"
          cat /tmp/quota-request-us-east-1.json
          
        else
          echo "❌ FAILED: Quota request failed for us-east-1"
          cat /tmp/quota-request-us-east-1.json
        fi
      else
        echo "❌ ERROR: Failed to assume role for us-east-1"
        exit 1
      fi
    EOF
  }
}

resource "null_resource" "quota_request_eu_west_2" {
  count = contains(var.target_regions, "eu-west-2") ? 1 : 0

  triggers = {
    account_id    = data.aws_caller_identity.eu_west_2[0].account_id
    region        = "eu-west-2"
    target_value  = var.default_target_quota_value
    timestamp     = var.aft_timestamp
    quota_code    = var.quota_code
  }
  
  provisioner "local-exec" {
    command = <<-EOF
      echo "=== QUOTA REQUEST FOR EU-WEST-2 ==="
      echo "Account: ${data.aws_caller_identity.eu_west_2[0].account_id}"
      echo "Target Value: ${var.default_target_quota_value}"
      
      # Assume role for the region
      ROLE_ARN="arn:aws:iam::${data.aws_caller_identity.eu_west_2[0].account_id}:role/AWSAFTExecution"
      TEMP_CREDS=$(aws sts assume-role \
        --role-arn "$ROLE_ARN" \
        --role-session-name "AFT-QuotaRequest-eu-west-2-$(date +%s)" \
        --output json)
      
      if [ $? -eq 0 ]; then
        echo "✅ Successfully assumed role for eu-west-2"
        
        # Export credentials
        export AWS_ACCESS_KEY_ID=$(echo $TEMP_CREDS | jq -r '.Credentials.AccessKeyId')
        export AWS_SECRET_ACCESS_KEY=$(echo $TEMP_CREDS | jq -r '.Credentials.SecretAccessKey')
        export AWS_SESSION_TOKEN=$(echo $TEMP_CREDS | jq -r '.Credentials.SessionToken')
        
        # Submit quota request
        echo "Submitting quota request for eu-west-2..."
        if aws service-quotas request-service-quota-increase \
          --service-code ${var.quota_service_code} \
          --quota-code ${var.quota_code} \
          --desired-value ${var.default_target_quota_value} \
          --region eu-west-2 > /tmp/quota-request-eu-west-2.json 2>&1; then
          
          echo "✅ SUCCESS: Quota request submitted for eu-west-2"
          cat /tmp/quota-request-eu-west-2.json
          
        else
          echo "❌ FAILED: Quota request failed for eu-west-2"
          cat /tmp/quota-request-eu-west-2.json
        fi
      else
        echo "❌ ERROR: Failed to assume role for eu-west-2"
        exit 1
      fi
    EOF
  }
}

resource "null_resource" "quota_request_ap_southeast_1" {
  count = contains(var.target_regions, "ap-southeast-1") ? 1 : 0

  triggers = {
    account_id    = data.aws_caller_identity.ap_southeast_1[0].account_id
    region        = "ap-southeast-1"
    target_value  = var.default_target_quota_value
    timestamp     = var.aft_timestamp
    quota_code    = var.quota_code
  }
  
  provisioner "local-exec" {
    command = <<-EOF
      echo "=== QUOTA REQUEST FOR AP-SOUTHEAST-1 ==="
      echo "Account: ${data.aws_caller_identity.ap_southeast_1[0].account_id}"
      echo "Target Value: ${var.default_target_quota_value}"
      
      # Assume role for the region
      ROLE_ARN="arn:aws:iam::${data.aws_caller_identity.ap_southeast_1[0].account_id}:role/AWSAFTExecution"
      TEMP_CREDS=$(aws sts assume-role \
        --role-arn "$ROLE_ARN" \
        --role-session-name "AFT-QuotaRequest-ap-southeast-1-$(date +%s)" \
        --output json)
      
      if [ $? -eq 0 ]; then
        echo "✅ Successfully assumed role for ap-southeast-1"
        
        # Export credentials
        export AWS_ACCESS_KEY_ID=$(echo $TEMP_CREDS | jq -r '.Credentials.AccessKeyId')
        export AWS_SECRET_ACCESS_KEY=$(echo $TEMP_CREDS | jq -r '.Credentials.SecretAccessKey')
        export AWS_SESSION_TOKEN=$(echo $TEMP_CREDS | jq -r '.Credentials.SessionToken')
        
        # Submit quota request
        echo "Submitting quota request for ap-southeast-1..."
        if aws service-quotas request-service-quota-increase \
          --service-code ${var.quota_service_code} \
          --quota-code ${var.quota_code} \
          --desired-value ${var.default_target_quota_value} \
          --region ap-southeast-1 > /tmp/quota-request-ap-southeast-1.json 2>&1; then
          
          echo "✅ SUCCESS: Quota request submitted for ap-southeast-1"
          cat /tmp/quota-request-ap-southeast-1.json
          
        else
          echo "❌ FAILED: Quota request failed for ap-southeast-1"
          cat /tmp/quota-request-ap-southeast-1.json
        fi
      else
        echo "❌ ERROR: Failed to assume role for ap-southeast-1"
        exit 1
      fi
    EOF
  }
}

resource "null_resource" "quota_request_us_west_2" {
  count = contains(var.target_regions, "us-west-2") ? 1 : 0

  triggers = {
    account_id    = data.aws_caller_identity.us_west_2[0].account_id
    region        = "us-west-2"
    target_value  = var.default_target_quota_value
    timestamp     = var.aft_timestamp
    quota_code    = var.quota_code
  }
  
  provisioner "local-exec" {
    command = <<-EOF
      echo "=== QUOTA REQUEST FOR US-WEST-2 ==="
      echo "Account: ${data.aws_caller_identity.us_west_2[0].account_id}"
      echo "Target Value: ${var.default_target_quota_value}"
      
      # Assume role for the region
      ROLE_ARN="arn:aws:iam::${data.aws_caller_identity.us_west_2[0].account_id}:role/AWSAFTExecution"
      TEMP_CREDS=$(aws sts assume-role \
        --role-arn "$ROLE_ARN" \
        --role-session-name "AFT-QuotaRequest-us-west-2-$(date +%s)" \
        --output json)
      
      if [ $? -eq 0 ]; then
        echo "✅ Successfully assumed role for us-west-2"
        
        # Export credentials
        export AWS_ACCESS_KEY_ID=$(echo $TEMP_CREDS | jq -r '.Credentials.AccessKeyId')
        export AWS_SECRET_ACCESS_KEY=$(echo $TEMP_CREDS | jq -r '.Credentials.SecretAccessKey')
        export AWS_SESSION_TOKEN=$(echo $TEMP_CREDS | jq -r '.Credentials.SessionToken')
        
        # Submit quota request
        echo "Submitting quota request for us-west-2..."
        if aws service-quotas request-service-quota-increase \
          --service-code ${var.quota_service_code} \
          --quota-code ${var.quota_code} \
          --desired-value ${var.default_target_quota_value} \
          --region us-west-2 > /tmp/quota-request-us-west-2.json 2>&1; then
          
          echo "✅ SUCCESS: Quota request submitted for us-west-2"
          cat /tmp/quota-request-us-west-2.json
          
        else
          echo "❌ FAILED: Quota request failed for us-west-2"
          cat /tmp/quota-request-us-west-2.json
        fi
      else
        echo "❌ ERROR: Failed to assume role for us-west-2"
        exit 1
      fi
    EOF
  }
}

# Outputs
output "multiregion_quota_summary" {
  description = "Multi-region quota automation summary"
  value = {
    target_regions       = var.target_regions
    enabled_regions      = length(var.target_regions)
    automation_method    = "Multi-region providers with static resources"
    timestamp            = var.aft_timestamp
    quota_service_code   = var.quota_service_code
    quota_code           = var.quota_code
    target_quota_value   = var.default_target_quota_value
  }
}

output "regional_quota_details" {
  description = "Per-region quota request details"
  value = {
    us_east_1 = contains(var.target_regions, "us-east-1") ? {
      account_id     = data.aws_caller_identity.us_east_1[0].account_id
      region         = "us-east-1"
      target_value   = var.default_target_quota_value
      request_method = "AWS CLI with cross-account role assumption"
    } : null
    
    eu_west_2 = contains(var.target_regions, "eu-west-2") ? {
      account_id     = data.aws_caller_identity.eu_west_2[0].account_id
      region         = "eu-west-2"
      target_value   = var.default_target_quota_value
      request_method = "AWS CLI with cross-account role assumption"
    } : null
    
    ap_southeast_1 = contains(var.target_regions, "ap-southeast-1") ? {
      account_id     = data.aws_caller_identity.ap_southeast_1[0].account_id
      region         = "ap-southeast-1"
      target_value   = var.default_target_quota_value
      request_method = "AWS CLI with cross-account role assumption"
    } : null
    
    us_west_2 = contains(var.target_regions, "us-west-2") ? {
      account_id     = data.aws_caller_identity.us_west_2[0].account_id
      region         = "us-west-2"
      target_value   = var.default_target_quota_value
      request_method = "AWS CLI with cross-account role assumption"
    } : null
  }
}

output "aft_next_steps" {
  description = "Next steps for multi-region quota management"
  value = [
    "1. Check AWS Service Quotas console in each target region",
    "2. Look for Service: VPC, Quota: Rules per security group",
    "3. AWS will review and approve/deny requests (1-2 business days per region)",
    "4. Quotas will be automatically applied upon AWS approval",
    "5. Total target regions: ${length(var.target_regions)}"
  ]
}