terraform {
  required_version = ">= 1.0"
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
}

########################
# STATIC PROVIDERS
########################
provider "aws" "us_east_1" {
  alias  = "us_east_1"
  region = "us-east-1"
  assume_role { role_arn = "{{ target_admin_role_arn }}" }
}

provider "aws" "eu_west_2" {
  alias  = "eu_west_2"
  region = "eu-west-2"
  assume_role { role_arn = "{{ target_admin_role_arn }}" }
}

provider "aws" "ap_southeast_1" {
  alias  = "ap_southeast_1"
  region = "ap-southeast-1"
  assume_role { role_arn = "{{ target_admin_role_arn }}" }
}

provider "aws" "us_west_2" {
  alias  = "us_west_2"
  region = "us-west-2"
  assume_role { role_arn = "{{ target_admin_role_arn }}" }
}

locals {
  region_providers = {
    "us-east-1"      = aws.us_east_1
    "eu-west-2"      = aws.eu_west_2
    "ap-southeast-1" = aws.ap_southeast_1
    "us-west-2"      = aws.us_west_2
  }
}

resource "aws_servicequotas_service_quota" "sg_rules_increase" {
  for_each = var.enable_quota_automation ? {
    for r in var.target_regions : r => local.region_providers[r]
  } : {}

  provider     = each.value
  service_code = var.quota_service_code
  quota_code   = var.quota_code
  value        = var.default_target_quota_value
}

data "aws_servicequotas_service_quota" "live" {
  for_each     = aws_servicequotas_service_quota.sg_rules_increase
  provider     = each.value     # fixed: use alias itself
  service_code = var.quota_service_code
  quota_code   = var.quota_code
}

output "security_group_quota_values" {
  value = { for r, d in data.aws_servicequotas_service_quota.live : r => d.value }
}